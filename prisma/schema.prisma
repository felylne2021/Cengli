// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Chain {
  chainId        Int    @id
  chainName      String
  rpcUrl         String
  nativeCurrency Json
  blockExplorer  String
  logoURI        String

  tokens Token[]
  comethSponsoredAddresses ComethSponsoredAddress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id      String @id @default(uuid())
  address String
  chainId Int

  name     String
  symbol   String
  decimals Int
  logoURI  String
  priceUsd Float

  chain           Chain            @relation(fields: [chainId], references: [chainId], onDelete: Cascade)
  transactions    Transaction[]
  partnerBalances PartnerBalance[]
  orders          P2POrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([address, chainId])
}

model Transaction {
  id String @id @default(uuid())

  fromUserId         String
  destinationUserId  String
  fromAddress        String
  destinationAddress String

  fromChainId        Int
  destinationChainId Int

  tokenAddress String
  amount       Float

  note String?

  token Token @relation(fields: [tokenAddress, fromChainId], references: [address, chainId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model P2PPartner {
  id      String @id @default(uuid())
  userId  String @unique
  address String
  name    String @default("Larry Gonzales")

  balances PartnerBalance[]
  orders   P2POrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerBalance {
  partnerId String
  tokenId   String

  amount Float

  partner P2PPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  token   Token      @relation(fields: [tokenId], references: [id])

  @@unique([tokenId, partnerId])
}

model P2POrder {
  id String @id @default(uuid())

  partnerId String
  partner   P2PPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  buyerUserId  String
  buyerAddress String

  destinationChainId Int

  tokenId String
  token   Token  @relation(fields: [tokenId], references: [id])

  amount Float
  status String @default("WFSAC") // WFSAC = waiting for seller to accept, WFBP = Waiting for buyer payment, WFSA = Waiting for seller approval, C = Completed, CB = Cancelled by buyer, CS = Cancelled by seller

  isActive Boolean          @default(true)
  chat     OrderChat?
  deposit  P2POrderDeposit?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model P2POrderDeposit {
  orderId         String @id
  contractOrderId String

  txHash String
  from   String
  to     String

  order P2POrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderChat {
  orderId String @id
  chatId  String

  isActive Boolean @default(true)

  order P2POrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ComethSponsoredAddress {
  chainId Int
  targetAddress String
  chain   Chain @relation(fields: [chainId], references: [chainId], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chainId, targetAddress])
}

model UserNotification {
  walletAddress String @id
  fcmToken     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}