/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface USDCTransferCengliInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CCTPAdapterAddress"
      | "IGPAddress"
      | "USDCAddress"
      | "checkBalance"
      | "getGasAmount"
      | "owner"
      | "transferSameChainUSDC"
      | "transferXchainUSDC"
      | "withdrawETH"
      | "withdrawUSDC"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SentTransferRemote"): EventFragment;

  encodeFunctionData(
    functionFragment: "CCTPAdapterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IGPAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDCAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferSameChainUSDC",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferXchainUSDC",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDC",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CCTPAdapterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IGPAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferSameChainUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferXchainUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDC",
    data: BytesLike
  ): Result;
}

export namespace SentTransferRemoteEvent {
  export type InputTuple = [
    messageId: BytesLike,
    destination: BigNumberish,
    recipient: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    destination: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    messageId: string;
    destination: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface USDCTransferCengli extends BaseContract {
  connect(runner?: ContractRunner | null): USDCTransferCengli;
  waitForDeployment(): Promise<this>;

  interface: USDCTransferCengliInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CCTPAdapterAddress: TypedContractMethod<[], [string], "view">;

  IGPAddress: TypedContractMethod<[], [string], "view">;

  USDCAddress: TypedContractMethod<[], [string], "view">;

  checkBalance: TypedContractMethod<
    [_userAddress: AddressLike, _tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getGasAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  transferSameChainUSDC: TypedContractMethod<
    [_recipientAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferXchainUSDC: TypedContractMethod<
    [
      _destinationDomain: BigNumberish,
      _recipientAddress: BytesLike,
      _amount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawUSDC: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CCTPAdapterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IGPAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDCAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkBalance"
  ): TypedContractMethod<
    [_userAddress: AddressLike, _tokenAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferSameChainUSDC"
  ): TypedContractMethod<
    [_recipientAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferXchainUSDC"
  ): TypedContractMethod<
    [
      _destinationDomain: BigNumberish,
      _recipientAddress: BytesLike,
      _amount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUSDC"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "SentTransferRemote"
  ): TypedContractEvent<
    SentTransferRemoteEvent.InputTuple,
    SentTransferRemoteEvent.OutputTuple,
    SentTransferRemoteEvent.OutputObject
  >;

  filters: {
    "SentTransferRemote(bytes32,uint32,bytes32,uint256)": TypedContractEvent<
      SentTransferRemoteEvent.InputTuple,
      SentTransferRemoteEvent.OutputTuple,
      SentTransferRemoteEvent.OutputObject
    >;
    SentTransferRemote: TypedContractEvent<
      SentTransferRemoteEvent.InputTuple,
      SentTransferRemoteEvent.OutputTuple,
      SentTransferRemoteEvent.OutputObject
    >;
  };
}
